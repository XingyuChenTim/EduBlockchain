extends layout

block content
  .container
    h1 #{__('Payment Hash')}
    p
      | This page is to verifying if the Payment hash is generated by a specific public key which is generated by its owner's private key
    .well#well
        ul.nav.nav-tabs.well-tabs#myTab(role='tablist')
          li.nav-item
            a.nav-link.active#pay-tab(data-toggle='tab', href='#pay', role='tab', aria-controls='pay', aria-selected='true') Gen Pay Hash
          li.nav-item
            a.nav-link#verify-tab(data-toggle='tab', href='#verify', role='tab', aria-controls='verify', aria-selected='false') Verify
        .tab-content#TabBody
          .tab-pane.show.active#pay(role='tabpanel', aria-labelledby='pay-tab')
            form.form-horizontal
              .form-group
                label.control-label Payment Detail
                textarea.form-control#sign-message('rows=1', aria-label='Payment Detail')
              .form-group
                label.control-label Private Key
                input#privateKey(type='number').form-control
              .form-group
                label.control-label Payment Hash
                input#sign-signature.form-control(disabled)
              .form-group
                button#sign-button.btn.btn-block.btn-primary(type='button') Gen Pay Hash
          .tab-pane#verify(role='tabpanel', aria-labelledby='verify-tab')
            form.form-horizontal
              .form-group
                label.control-label Payment Detail
                textarea.form-control#verify-message('rows=1', aria-label='Payment Detail')
              .form-group
                label.control-label Public Key
                input#publicKey.form-control(disabled)
              .form-group
                label.control-label Payment Hash
                input#verify-signature.form-control
              .form-group
                button#verify-button.btn.btn-block.btn-primary(type='button') Verify

  script.
    var EC = elliptic.elliptic().ec;
    var ec = new EC('secp256k1');

    var keypair = ec.genKeyPair();
    if (Cookies.get('privateKey')) {
      keypair = ec.keyFromPrivate(Cookies.get('privateKey'));
    }

    function update() {
      var prv = keypair.getPrivate('hex');
      var pub = keypair.getPublic('hex');
      $('#privateKey').val(bigInt(prv, 16).toString());
      $('#publicKey').val(pub);
      Cookies.set('privateKey', prv.toString());
      Cookies.set('publicKey', pub);
    }

    function resetVerifier() {
      $('#well').removeClass('alert-success');
      $('#well').removeClass('alert-danger');
    }

    $(function() {
      $('#sign-button').click(function() {
        var binaryMessage = buffer.Buffer.from(CryptoJS.SHA256($('#sign-message').val()).toString(CryptoJS.enc.Hex));
        var hexSignature = buffer.Buffer.from(keypair.sign(binaryMessage).toDER()).toString('hex');
        $('#sign-signature').val(hexSignature);
        $('#verify-signature').val(hexSignature);
        update();
        resetVerifier();
      });
      $('#verify-button').click(function() {
        // verify by using only the public key
        $('#publicKey').val($('#publicKey').val().replace(/[^0-9a-fA-F]/g, ''));
        var tmpKey;
        try {
          tmpKey = ec.keyFromPublic($('#publicKey').val(), 'hex');
          var binaryMessage = buffer.Buffer.from(CryptoJS.SHA256($('#verify-message').val()).toString(CryptoJS.enc.Hex));
          if (tmpKey.verify(binaryMessage, $('#verify-signature').val())) {
            $('#well').addClass('alert-success');
          }
          else {
            $('#well').addClass('alert-danger');
          }
        }
        catch(e) {
          $('#well').addClass('alert-danger');
        }
      });
      $('#sign-signature').bind('keyup', function() {
        resetVerifier();
      });
      $('#sign-message').bind('keyup', function() {
        resetVerifier();
      });
      $('#verify-signature').bind('keyup', function() {
        resetVerifier();
      });
      $('#verify-message').bind('keyup', function() {
        resetVerifier();
      });
      $('#publicKey').bind('keyup', function() {
        resetVerifier();
      });
      $('#privateKey').bind('keyup', function() {
        $('#privateKey').val($('#privateKey').val().replace(/\D/g, ''));
        keypair = ec.keyFromPrivate(bigInt($('#privateKey').val()).toString(16));
        resetVerifier();
        update();
      });
      if (Cookies.get('message')) {
        $('#sign-message').val(Cookies.get('message'));
        $('#verify-message').val(Cookies.get('message'));
      }
      $('#sign-message').bind('keyup', function() {
        Cookies.set('message', $('#sign-message').val());
        $('#verify-message').val($('#sign-message').val());
      });
      $('#verify-message').bind('keyup', function() {
        Cookies.set('message', $('#verify-message').val());
        $('#sign-message').val($('#verify-message').val());
      });
      $('#myTab').on('shown.bs.tab', function (e) {
        resetVerifier();
      });
      update();
    });
